%This is a program that modifies a sound stimulus according to auditory
%thresholds. Created by CWB and KSM on 10/20/14

clear all
close all

% Load audiogram from XLS file
[data, txt, raw] = xlsread('PracticeSubjectRL.xls'); 

% Transpose data
data = data';

% Plot audiogram
plot(data(:,1), data(:,6), 'ro--')
set(gca, 'Ydir', 'reverse');
xlabel('Frequency (Hz)');
ylabel('dB SPL');

% Load MMBF7.wav (/ba/)
%[ba, fs] = wavread('MMBF7.wav'); %USE FOR KATE'S COMPUTER
[ba, fs] = audioread('MMBF7.wav'); %USE FOR TESTING
% Plot ba
plot(ba); 

% Compute one-sided amplitude spectrum of /ba/
NFFT = 2*length(ba); 
fft_ba = fft(ba, NFFT)/NFFT;  % two-sided spectrum
amp = 2*abs(fft_ba(1:NFFT/2+1));

% Frequencies of amplitude spectrum
f = fs/2*linspace(0,1, NFFT/2+1);

% Plot amplitude spectrum
figure, hold on
plot(f, amp); 

% Compute filter response function from audiogram
figure, hold on
audiogram = data(1:6, 6); 
frequencies = [data(1:6,1)'];

% Now find the cloest frequencies to these audiogram frequencies and use
% those

% Catch in case there
audiogram = audiogram - max(audiogram); 
% audiogram = audiogram - mean(audiogram); 
% audiogram = [audiogram(1); audiogram]; 

% Interpolate our audiogram 
% audiogram_interp = [audiogram(1) audiogram audiogram(end)]; 
interp_frequencies = [];
interp_audiogram = [];
for i=1:numel(frequencies) - 1 
    
    % Find the frequencies in this range
    mask = f>=frequencies(i) & f<frequencies(i+1); 
    
    % Use a linear model to fit the two points
    [p] = polyfit([frequencies(i) frequencies(i+1)], [audiogram(i) audiogram(i+1)], 1);
    interp_audiogram = [interp_audiogram; [polyval(p, f(mask))]'];
    % Find the number of points between the frequencies 
%     nsamps = numel(find(f >= frequencies(i) & f < frequencies(i+1)));
    
    % interpolate frequencies
%     interp_frequencies = [interp_frequencies; [linspace(frequencies(i), frequencies(i+1), nsamps)]'];
    
    % interpolate audiogram
    % interpolate frequencies
%     interp_audiogram = [interp_audiogram; [linspace(audiogram(i), audiogram(i+1), nsamps)]'];
    
end % for i=1:numel(audiogram)

% Plot audiogram and interpolated audiogram
figure, hold on
plot(frequencies, audiogram, 'rs--', 'linewidth', 2);


% Find range in amplitude spectrum to scale 
mask = f >= frequencies(1) & f < frequencies(end); 
plot(f(mask), interp_audiogram, 'ko');

% Scale magnitude (filter)
amp_filt = amp;
amp_filt(mask) = amp_filt(mask) .* db2amp(interp_audiogram);

% Flip amplitude spectrum
amp_filt_full = [amp_filt; flipud(amp_filt(2:end-1))]./2; 

% Get the phase angle
ang = angle(fft_ba); 

% make the fft
recon_fft = amp_filt_full.*cos(ang) + amp_filt_full.*sin(ang);

recon_ba= real(ifft(recon_fft));
recon_ba = recon_ba(1:length(ba));

% RMS normalize ba
% recon_ba_sc = recon_ba.*(rms(ba)./rms(recon_ba)); %USE FOR TESTING
recon_ba_sc = recon_ba.* (max(abs(ba))./max(abs(recon_ba))); %USE FOR KATE'S COMPUTER

figure
hold on
plot([ba recon_ba_sc])

% 
% %creates the new .wav file
%wavwrite(recon_ba_sc, fs, 32, 'MMBF7_PracticeSubjectRL.wav'); %USE FOR KATE'S COMPUTER
audiowrite(recon_ba, fs, 32, 'MMBF_PracticeSubjectRL.wav'); %USE FOR TESTING

% Use this stimulus file and the headphone amplifier for presentation at an
% SL level depending on their 3 frequency PTA (.5 1 and 2kHz)
